/*
 * https://leetcode.com/problems/find-the-difference/#/description
 *
 * Given two strings s and t which consist of only lowercase letters.
 *
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 *
 * Find the letter that was added in t.
 */

function findTheDifference(s, t) {
  const tracker = Object.create(null);

  for (let i = 0; i < t.length; i++) {
    const currentLetter = t[i];
    tracker[currentLetter] = tracker[currentLetter] ? tracker[currentLetter] + 1 : 1;
  }

  for (let i = 0; i < s.length; i++) {
    const currentLetter = s[i];
    tracker[currentLetter] = tracker[currentLetter] - 1;
  }

  for (let key in tracker) {
    if (tracker[key]) return key;
  }
}

// alternativeSolution using Object.keys() instead of for...in
function alternativeSolution(s, t) {
  const tracker = Object.create(null);

  for (let i = 0; i < t.length; i++) {
    const currentLetter = t[i];
    tracker[currentLetter] = tracker[currentLetter] ? tracker[currentLetter] + 1 : 1;
  }

  for (let i = 0; i < s.length; i++) {
    const currentLetter = s[i];
    tracker[currentLetter] = tracker[currentLetter] - 1;
  }

  const keys = Object.keys(tracker);
  for (let i = 0; i < keys.length; i++) {
    if (tracker[keys[i]]) return keys[i];
  }
}

// https://discuss.leetcode.com/topic/58758/javascript-solution-using-sum-of-characters/2
// Solution using bitwise XOR
function bitwiseSolution(s, t) {
  let c = t.charCodeAt(t.length - 1);

  for (let i = 0; i < s.length; i++) {
    c = c ^ s.charCodeAt(i) ^ t.charCodeAt(i);
  }

  return String.fromCharCode(c);
}

module.exports = {
  findTheDifference,
  alternativeSolution,
  bitwiseSolution,
};

/*
 * Lessons learned
 *
 * MyOriginalSolution x 89,094 ops/sec ±1.19% (79 runs sampled)
 * Alternative Solution: Using Object.keys() x 75,116 ops/sec ±1.10% (82 runs sampled)
 * Alternative Solution: Bitwise solution x 4,447,180 ops/sec ±1.28% (81 runs sampled)
 * Fastest is Alternative Solution: Bitwise solution
 * 5820% faster
 *
 * 1. for (let key in myObject) is faster than Object.keys(myObject);
 * 2. Bitwise solutions are best! When looking for a single difference, default to trying to use XOR (^)
 * I tried doing bitwise with strings themselves. I was close; I just had to convert it to a unique number that represents
 * the string itself. `charCodeAt()` does exactly that.
 */
